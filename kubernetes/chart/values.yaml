deployments:
  giropops-senhas:
    name: "giropops-senhas"
    image: "johnmonteir0/linuxtips-giropops-senhas:6.0"
    replicas: 3
    ports:
      - port: 5000
        targetPort: 5000
        name: "giropops-senhas-port"
        NodePort: 32500
      - port: 8088
        targetPort: 5000
        name: "giropops-senhas-metrics"
    labels:
      app: "giropops-senhas"
      env: "labs"
    resources:
      requests: { memory: "128Mi", cpu: "250m" }
      limits:   { memory: "256Mi", cpu: "500m" }

    # Run with OpenTelemetry auto-instrumentation
    command: ["/bin/sh","-lc"]
    args:
      - >
        opentelemetry-instrument
        --traces_exporter otlp
        --metrics_exporter none
        --service_name giropops-senhas
        python app.py

    env:
      # identity & verbosity
      - name: OTEL_LOG_LEVEL
        value: "info"
      - name: OTEL_TRACES_SAMPLER
        value: "always_on"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "deployment.environment=labs"

      # export traces directly to Jaeger (OTLP/HTTP)
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "http://jaeger-collector.giropops-senhas.svc.cluster.local:4318"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"

  redis:
    image: "johnmonteir0/chainguard-redis"
    replicas: 1
    port: 6379
    labels: { app: "redis", env: "labs" }
    resources:
      requests: { memory: "128Mi", cpu: "250m" }
      limits:   { memory: "256Mi", cpu: "500m" }

services:
  giropops-senhas:
    ports:
      - port: 5000
        targetPort: 5000
        name: "app"
        serviceType: "ClusterIP"
      - port: 8088
        targetPort: 5000        # << matches the deployment fix above
        name: "metrics"
        serviceType: "ClusterIP"
    labels: { app: "giropops-senhas", env: "labs" }

  redis:
    ports:
      - port: 6379
        targetPort: 6379
        name: "service"
        serviceType: "ClusterIP"
    labels: { app: "redis", env: "labs" }

# (Collector completely removed)

databases:
  giropops-senhas:
    mysql:
      host: "mysql.svc.cluster.local"
      port: 3306
      name: "MyDB"

monitoring:
  enabled: true
  serviceMonitors:
    - name: giropops-senhas
      namespace: giropops-senhas
      labels: { app: giropops-senhas, env: labs }
      prometheusRelease: kube-prometheus-stack
      selector:
        matchLabels:
          app: giropops-senhas
      targetNamespace: giropops-senhas
      endpoints:
        - port: metrics
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s
