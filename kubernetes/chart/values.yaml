deployments:
  giropops-senhas:
    name: "giropops-senhas"
    image: "johnmonteir0/linuxtips-giropops-senhas:7.1"
    replicas: 3
    ports:
      - port: 5000
        targetPort: 5000
        name: "giropops-senhas-port"
        NodePort: 32500
      - port: 8088
        targetPort: 8088
        name: "giropops-senhas-metrics"
    labels:
      app: "giropops-senhas"
      env: "labs"
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "256Mi"
        cpu: "500m"
    env:
      # App telemetry identity + verbosity
      - name: OTEL_SERVICE_NAME
        value: "giropops-senhas"
      - name: OTEL_LOG_LEVEL
        value: "info"

      # Be explicit about sampling/resource attrs (helps debugging)
      - name: OTEL_TRACES_SAMPLER
        value: "always_on"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: "deployment.environment=labs"

      # unified OTLP endpoint for all signals
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "otel-collector.giropops-senhas.svc.cluster.local:4317"
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "grpc"
      - name: OTEL_EXPORTER_OTLP_INSECURE
        value: "true"

  redis:
    image: "johnmonteir0/chainguard-redis"
    replicas: 1
    port: 6379
    labels:
      app: "redis"
      env: "labs"
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "256Mi"
        cpu: "500m"

  otel-collector:
    image: "otel/opentelemetry-collector-contrib:0.112.0"
    args: ["--config=/conf/otel-collector-config.yaml"]
    replicas: 2
    labels:
      app: "otel-collector"
      env: "labs"
    ports:
      - name: otlp-grpc
        port: 4317
      - name: otlp-http
        port: 4318
      - name: metrics
        port: 8889
    volumeMounts:
      - name: config
        mountPath: /conf
        readOnly: true
    volumes:
      - name: config
        configMap:
          name: otel-collector-config-observability-config

services:
  giropops-senhas:
    ports:
      - port: 5000
        targetPort: 5000
        name: "app"
        serviceType: "ClusterIP"
      - port: 8088
        targetPort: 8088
        name: "metrics"
        serviceType: "ClusterIP"
    labels:
      app: "giropops-senhas"
      env: "labs"

  redis:
    ports:
      - port: 6379
        targetPort: 6379
        name: "service"
        serviceType: "ClusterIP"
    labels:
      app: "redis"
      env: "labs"

  otel-collector:
    serviceType: "ClusterIP"
    ports:
      - name: otlp-grpc
        port: 4317
        targetPort: 4317
      - name: otlp-http
        port: 4318
        targetPort: 4318
      - name: metrics
        port: 8889
        targetPort: 8889
    labels:
      app: "otel-collector"
      env: "labs"

observability:
  otel-collector-config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      batch: {}

    exporters:
      # Send traces to Jaeger via gRPC collector port
      otlp/jaeger:
        endpoint: jaeger.giropops-senhas.svc.cluster.local:14250
        tls:
          insecure: true

      # Useful to see incoming spans in Collector logs
      logging:
        loglevel: debug

      # Expose Collector metrics for Prometheus
      prometheus:
        endpoint: "0.0.0.0:8889"

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/jaeger, logging]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]

databases:
  giropops-senhas:
    mysql:
      host: "mysql.svc.cluster.local"
      port: 3306
      name: "MyDB"

monitoring:
  enabled: true
  serviceMonitors:
    - name: otel-collector
      namespace: giropops-senhas
      labels: { app: otel-collector, env: labs }
      prometheusRelease: kube-prometheus-stack
      selector:
        matchLabels:
          app: otel-collector
      targetNamespace: giropops-senhas
      endpoints:
        - port: metrics
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s

    - name: giropops-senhas
      namespace: giropops-senhas
      labels: { app: giropops-senhas, env: labs }
      prometheusRelease: kube-prometheus-stack
      selector:
        matchLabels:
          app: giropops-senhas
      targetNamespace: giropops-senhas
      endpoints:
        - port: metrics
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s
