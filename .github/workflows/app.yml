name: "Application: Pipeline"

on:
  push:
    branches: [ main ]
    paths:
      - 'app.py'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/app.yml'
  workflow_dispatch: {}

env:
  IMAGE_NAME: johnmonteir0/linuxtips-giropops-senhas

permissions:
  contents: read
  id-token: write

concurrency:
  group: app-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      # Short SHA for image tag (7 chars)
      - name: Compute short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_ENV"

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=dev-${{ env.SHORT_SHA }}
            type=raw,value=latest

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  sonar_scan:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install runtime deps (best-effort) + test deps for coverage
      - name: Install deps
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install pytest pytest-cov coverage

      # Run tests and produce coverage.xml for Sonar
      - name: Test (pytest) + coverage
        run: |
          pytest --maxfail=1 --disable-warnings -q --cov=. --cov-report=xml

      # Ensure sonar-project.properties has the coverage mapping
      - name: Ensure sonar-project.properties has coverage path
        run: |
          PROP_FILE="sonar-project.properties"
          if [ ! -f "$PROP_FILE" ]; then
            echo "sonar.projectKey=giropops-senhas" > "$PROP_FILE"
            echo "sonar.sources=." >> "$PROP_FILE"
          fi
          # add/replace coverage path
          if grep -q '^sonar.python.coverage.reportPaths=' "$PROP_FILE"; then
            sed -i 's|^sonar.python.coverage.reportPaths=.*|sonar.python.coverage.reportPaths=coverage.xml|' "$PROP_FILE"
          else
            echo "sonar.python.coverage.reportPaths=coverage.xml" >> "$PROP_FILE"
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

      # Fail the job if the Quality Gate fails
      - name: Wait for Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
