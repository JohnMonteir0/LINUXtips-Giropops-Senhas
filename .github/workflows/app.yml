name: "Application: Pipeline"

on:
  push:
    branches: [ main, staging, stg/*, develop, dev/* ]
    paths:
      - 'app.py'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/app.yml'
      - 'kubernetes/chart/**'
  workflow_dispatch: {}

env:
  IMAGE_NAME: johnmonteir0/linuxtips-giropops-senhas

permissions:
  contents: read
  id-token: write

concurrency:
  group: app-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -----------------------------
  # 1) Build (no push) + Push job
  # -----------------------------
  build_and_push:
    runs-on: ubuntu-latest

    outputs:
      short_sha: ${{ steps.compute.outputs.short_sha }}
      env_name:  ${{ steps.compute.outputs.env_name }}
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      # Decide environment from branch and compute short SHA
      - name: Compute env + short SHA
        id: compute
        run: |
          REF="${GITHUB_REF#refs/heads/}"
          if [[ "$REF" == "main" ]]; then ENV=prod
          elif [[ "$REF" == "staging" || "$REF" == stg/* ]]; then ENV=stg
          else ENV=dev; fi
          echo "env_name=$ENV" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Tags: <env>-<shortsha> + latest for dev only
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.compute.outputs.env_name }}-${{ steps.compute.outputs.short_sha }}
            # give "latest" only to dev env:
            type=raw,value=latest,enable=${{ steps.compute.outputs.env_name == 'dev' }}

      # ðŸ”¹ Build only (no push) â€” smoke-test Dockerfile
      - name: Build (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          push: false
          tags: ${{ env.IMAGE_NAME }}:ci-check
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      # ðŸ”¹ Push image with final tags
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  # -----------------------------
  # 2) Sonar (tests + coverage + gate)
  # -----------------------------
  sonar_scan:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install pytest pytest-cov coverage

      # Disable OpenTelemetry during CI (no collector)
      - name: Test (pytest) + coverage
        env:
          OTEL_SDK_DISABLED: "true"
          OTEL_TRACES_EXPORTER: "none"
          OTEL_LOG_LEVEL: "error"
        run: |
          pytest --maxfail=1 --disable-warnings -q --cov=. --cov-branch --cov-report=xml

      - name: Ensure sonar-project.properties has coverage path
        run: |
          PROP_FILE="sonar-project.properties"
          if [ ! -f "$PROP_FILE" ]; then
            echo "sonar.projectKey=giropops-senhas" > "$PROP_FILE"
            echo "sonar.sources=." >> "$PROP_FILE"
          fi
          if grep -q '^sonar.python.coverage.reportPaths=' "$PROP_FILE"; then
            sed -i 's|^sonar.python.coverage.reportPaths=.*|sonar.python.coverage.reportPaths=coverage.xml|' "$PROP_FILE"
          else
            echo "sonar.python.coverage.reportPaths=coverage.xml" >> "$PROP_FILE"
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN:    ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

      - name: Wait for Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # -----------------------------
  # 3) Argo CD deployment
  # -----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push, sonar_scan]
    if: ${{ needs.sonar_scan.result == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Compute env + tag
        id: compute
        run: |
          REF="${GITHUB_REF#refs/heads/}"
          if [[ "$REF" == "main" ]]; then ENV=prod
          elif [[ "$REF" == "staging" || "$REF" == stg/* ]]; then ENV=stg
          else ENV=dev; fi
          echo "env_name=$ENV" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "image_tag=${ENV}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          install -m 755 argocd /usr/local/bin/argocd
          argocd version --client

      # Login with username/password
      - name: ArgoCD login
        env:
          ARGOCD_SERVER:   ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          # --insecure if you have a staging cert; remove when you use trusted certs
          argocd login "$ARGOCD_SERVER" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure

      # Create or upsert the Application pointing at Helm chart
      - name: Create or update Application
        env:
          APP_NAME: ${{ vars.APP_NAME || 'giropops-senhas' }}
          DEST_SERVER: ${{ vars.ARGOCD_DEST_SERVER || 'https://kubernetes.default.svc' }}
          DEST_NAMESPACE: ${{ vars.ARGOCD_DEST_NAMESPACE || 'giropops-senhas' }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          APP_EXISTS=$(argocd app get "$APP_NAME" >/dev/null 2>&1 && echo yes || echo no)

          if [ "$APP_EXISTS" = "no" ]; then
            argocd app create "$APP_NAME" \
              --repo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git" \
              --revision "$GITHUB_REF_NAME" \
              --path kubernetes/chart \
              --dest-server "$DEST_SERVER" \
              --dest-namespace "$DEST_NAMESPACE" \
              --helm-set image.repository="$IMAGE_NAME" \
              --helm-set image.tag="${{ steps.compute.outputs.image_tag }}" \
              --sync-policy automated \
              --auto-prune
          else
            # update chart values (image tag) and branch revision
            argocd app set "$APP_NAME" \
              --revision "$GITHUB_REF_NAME" \
              -p image.repository="$IMAGE_NAME" \
              -p image.tag="${{ steps.compute.outputs.image_tag }}"
          fi

      - name: Sync & wait
        env:
          APP_NAME: ${{ vars.APP_NAME || 'giropops-senhas' }}
        run: |
          argocd app sync "$APP_NAME" --prune
          argocd app wait "$APP_NAME" --health --sync --timeout 600

